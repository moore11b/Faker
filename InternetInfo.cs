using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using FakerClass;
///////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Project:        Project 1
//  File Name:      InternetInfo.cs
//  Description:    This class generates internet related information for the person object  
//  Course:         CSCI-2910-001 - Data Structures
//  Author:         Cory Moore, moorecs1@etsu.edu, Department of Computing, ETSU
//  Created:        Thursday, January 09, 2017
//  Copyright:      Cory Moore, 2017
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Project1
{
    /// <summary>
    /// This class generates internet related information for the person object
    /// </summary>
    public class InternetInfo
    {
        public string EmailAddress { get; private set; }
        public string Password { get; private set; }
        public string TopLd{ get; private set; }
        public string DomainName { get; private set; }
        public string MacAddress { get; private set; }
        public string Ipv4 { get; private set; }
        public string Url { get; private set; }
        /// <summary>
        /// Internet Info constructor.  Contains randomly generated-
        /// web info for a person. 
        /// </summary>
        public InternetInfo(string firstName,string lastName)
        {
            AssignEmailAddress(firstName,lastName);
            AssignPassword();
            AssignUrl();
            AssignMacAddress();
            AssignIpv4();
        }
        /// <summary>
        /// Assigns a random MAC address
        /// </summary>
        private void AssignMacAddress()
        {
            var chars =
                "1234567890ABCDEF".ToCharArray();
            var tempMac = "";
            for (var i = 0; i < 6; i++)
            {
                if (i < 5)
                {
                    for (var j = 0; j < 2; j++)
                    {
                        tempMac += chars[new Random().Next(0,chars.Length)];
                    }
                    tempMac += ":";
                }
                else
                {
                    for (var j = 0; j < 2; j++)
                    {
                        tempMac += chars[new Random().Next(0,chars.Length)];
                    }
                }
            }
            MacAddress = tempMac;
        }
        /// <summary>
        /// Assigns an IPV4 address to the user. 
        /// </summary>
        private void AssignIpv4()
        {
            var tempString = "";
            var tempInt = 0;
            for (var i = 0; i < 4; i++)
            {
                if (i < 3)
                    tempString += new Random().Next(0,255) + ".";
                else
                    tempString += new Random().Next(0,255) + "";
            }
            Ipv4 = tempString;
        }
        /// <summary>
        /// AutoGenerated email address based on the person's name
        /// </summary>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        private void AssignEmailAddress(string firstName,string lastName)
        {
            int randNum =new Random().Next(0, 3);
            if (randNum == 0)
            {
                EmailAddress = firstName + lastName + "@fakeemail.com";
             }
            else if (randNum == 1)
            {
                EmailAddress = firstName + "_"+ lastName + "@fakeemail.com";
            }
            else if (randNum == 2)
            {
                EmailAddress = firstName + "_"+ lastName +new Random().Next(0,9999)
                               + "@fakeemail.com";
            }
        }//end method
         /// <summary>
         /// Inserts a random set of characters inside the email between the first and last
         /// name.  This keeps the original structure of the email, but appending too it. 
         /// </summary>
         /// <param name="lastName"></param>
         /// <param name="age"></param>
        public void UserAssignEmailAddress(string lastName, string oldEmail)
        {
            var chars =
                "_abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray();

            var iLastTemp = lastName.Length;
            var strlastTemp = oldEmail.Substring(iLastTemp);
            var insertIndex = oldEmail.Length - lastName.Length - 14;
            var strNewEmail = oldEmail.Substring(0,insertIndex) +
                              chars[new Random().Next(0,chars.Length)] + strlastTemp;
            EmailAddress = strNewEmail;

        }
        /// <summary>
        /// Assigns a randomly generated password based on ETSU requirments.
        /// </summary>
         private void AssignPassword()
        {
            string tempPassword = "";
           var chars =
               "$%#@!*abcdefghijklmnopqrstuvwxyz1234567890?;:ABCDEFGHIJKLMNOPQRSTUVWXYZ^&".ToCharArray();
            
            for (var i = 0; i < new Random().Next(8, 32); i++)
            {
                tempPassword += chars[new Random().Next(0,chars.Length)];
            }
            Password = tempPassword;
        }//end method
        /// <summary>
        /// Chooses a TLD from a txt file containing all ICANN registered TLDS.
        /// NOTE** some may appear strange, but are verified to be real.
        /// (If it looks odd, it's not an error that prints out the memory address)
        /// </summary>
        private void AssignTld()
        {
            char[] separators = {',','\n' };
            var path = "../Project1/TLDs.txt";
            var readText = File.ReadAllText(path);
            var varTldList = readText.Split(separators, StringSplitOptions.None);
            TopLd = varTldList[new Random().Next(0, varTldList.Length)];
        }
        /// <summary>
        /// Creates a domain name by reading from a list in a txt file.
        /// </summary>
        private void AssignDomainName()
        {
            char[] separators =  {',','\n'};
            var path = "../Project1/DomainNames.txt";
            var readText = File.ReadAllText(path);
            var varList = readText.Split(separators, StringSplitOptions.None);
            DomainName = varList[new Random().Next(0, varList.Length)];
        }

        /// <summary>
        /// Uses the Generated DomainName and TLD to create a URL.
        /// </summary>
        private void AssignUrl()
        {
           AssignDomainName();
           AssignTld();
           var temp = "http://wwww." + DomainName + "."+ TopLd;
           Url = temp;
        }
        /// <summary>
        /// sends the two string information to the Male and Female classes
        /// to be printed out. 
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return "\nEmail      : " + EmailAddress +
                   "\nPassword   : " + Password +
                   "\nUrl        : " + Url + 
                   "\nMAC Address: " + MacAddress + 
                   "\nIPV4       : " + Ipv4;
        }//end tostring
    }
}